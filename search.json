[
	
		{
		  "title"    : "Using Monit to get email alert on unauthorized login",
		  "category" : "technology",
		  "url"     : "/technology/using-monit-to-get-email-alert-on-unauthorized-login",
		  "date"     : "2014-06-04 00:00:00 +0530",
		  "content"	: "For a long time, we had our own custom written perl script to alert us whenever someone logged into our production servers from an ip address we do not recognize (not whitelisted). The script looked somewhat like this…#!/usr/bin/perl# script file: alert_on_login.pl#my $login_str = &amp;quot;Accepted publickey&amp;quot;;my $whitelist_ip = &amp;quot;122.123.123.111&amp;quot;;sub sendEmail{        my ($to, $from, $subject, $message) = @_;        my $sendmail = &amp;#39;/usr/lib/sendmail&amp;#39;;        open(MAIL, &amp;quot;|$sendmail -oi -t&amp;quot;);        print MAIL &amp;quot;From: $fromn&amp;quot;;        print MAIL &amp;quot;To: $ton&amp;quot;;        print MAIL &amp;quot;Subject: $subjectnn&amp;quot;;        print MAIL &amp;quot;$messagen&amp;quot;;        close(MAIL);}while (&amp;lt;&amp;gt;) {        if (grep(/$login_str/, $_) &amp;amp;&amp;amp; !grep(/$whitelist_ip/, $_)) {                print $_;                chomp $_;                @arr = split(&amp;#39; &amp;#39;, $_);                sendEmail(&amp;#39;recepient1@elitmus.com, recepient2@elitmus.com&amp;#39;,                          &amp;#39;monit@elitmus.com&amp;#39;,                          &amp;#39;Server login from &amp;#39; . $arr[10],                          $_);        }}All we needed to do was to run this script in the background as a daemon, and it would send us an email alert whenever someone logged in successfully. As root user start the script like this:  # (perl alert_on_login.pl /var/log/auth.log &amp;amp;)Ever since we started using monit for the usual purpose (monitoring processes), we have also entrusted monit to do the job of the above perl script. Monit makes this super simple…Monit is a popular opensource process monitoring tool. It is used mostly for monitoring health of any linux process and take necessary action if any of the set parameters are breached. Monit can restart a process if the process failed for some reason. Monit can also notify you of incidents and actions taken.See this to learn more about monit’s alert capabilities.Monit’s global configuration file is usually /etc/monit/monitrc. Here is what monit needs to be told about how to send email alerts:...# This is our SMTP server settings. The complete syntax is# SET MAILSERVER &amp;lt;hostname [PORT] [USERNAME] [PASSWORD] [using SSLAUTO|SSLV2|SSLV3|TLSV11|TLSV12] [CERTMD5 checksum]&amp;gt;, ...#          [with TIMEOUT X SECONDS]#          [using HOSTNAME hostname]## But for our purpose, localhost is good enoughSET mailserver localhost# This is the email template for alert messagesSET mail-format {  from: monit@elitmus.com  subject: $SERVICE $EVENT at $DATE  message: Monit $ACTION $SERVICE at $DATE on $HOST: $DESCRIPTION.           Yours sincerely,           monit}# Alerts can be triggered for various reasons. Successful ssh login is just one of those reasons.# Since this is a global configuration, we can tell monit to not send alerts for certain events#  We also specify the email address of the recepient who will receive the alertsset alert recepient1@elitmus.com NOT ON { action, instance, pid, ppid, nonexist }...And then we add this config file ssh_logins.conf specific to sshd related stuff:check file ssh_logins with path /var/log/auth.log  ignore match &amp;quot;/etc/monit/whitelist_ips.regex&amp;quot;  if match &amp;quot;Accepted publickey&amp;quot; then alertNotice how we tell monit to ignore logins from known ip addresses. We can now store all whitelist ip addresses in a separate file /etc/monit/whitelist_ips.regex, one address per line.Note: We have disabled password based login and hence do not monitor for passworded logins. If you use passworded login, you should change &quot;Accepted publickey&quot; to &quot;Accepted password&quot;Happy monitoring!"
		} ,
	
		{
		  "title"    : "Gotcha&#39;s while syntactically translating AES encryption logic from PHP to Ruby",
		  "category" : "technology",
		  "url"     : "/technology/gotchas-while-syntactically-translating-aes-encryption-logic-from-php-to-ruby",
		  "date"     : "2014-05-25 00:00:00 +0530",
		  "content"	: "Our Payment Gateway service provider recently launched a new platform with some nice-to-have features. We wanted those features and so we decided to migrate. Being one of the earliest adopters of the new platform, there was no integration kit available. We had to build it ourselves. Not a problem. Since we are a Ruby On Rails shop, we built our own Ruby integration kit. All went well and we pushed it to production.A month or two later, we got an email from our gateway provider seeking our help with writing the encryption and decryption logic for the Ruby integration kit they were developing. We were a little surprised, because we noticed they had already published integration kits for PHP, Python, JAVA etc. How difficult can it be to translate that to Ruby?Turns out, syntactic transalation of code from one programming language to another does not always work. A slightly more deeper knowledge helps. We could almost guess where they were getting stuck.Before we get to the story, some backgroung on the encryption algo will add clarity.For secure communication between our server and the gateway, the prescribed cipher was AES, specifically symmetric-key block cipher with a 128 bit secret key in CBC mode. Since OpenSSL already implements this algo and is avaliable on almost all platforms, most programming languages just bundle a wrapper for OpenSSL.So if its the same OpenSSL that the wrappers call, why couldn’t the gateway service provider translate their own PHP code to Ruby?Here is why:AES works by breaking the plain text (the text to be encrypted) into blocks of 128 bits (or 16 bytes). In CBC mode, each block is XORed with the key to get cipher text of that block. The cipher text of the previous block is used for encrypting the next block… so on and so forth, until all the blocks are encrypted.Note that the length of the cipher text will be exactly same as that of the plain text.The problem occures with the last block. If the length of the plain text is not a multiple of 128. the last block will be shorter than 128 bits. Since the algo can work only on blocks of 128 bits, It is a common practice to pad the last block so that it becomes equal to 128 bits in lenght. This padding is subsequently discarded after decryption.Note: The actual algo is more complicated than this. We have deliberately left out details that are not relevent for this post.This is the encryption method in the PHP integration kit published by the gateway service provider 1 function encrypt($plainText,$key) 2 { 3   $secretKey = hextobin(md5($key)); 4   $initVector = &amp;quot;...&amp;quot;; 5   $openMode = mcrypt_module_open(MCRYPT_RIJNDAEL_128, &amp;#39;&amp;#39;,&amp;#39;cbc&amp;#39;, &amp;#39;&amp;#39;); 6   $blockSize = mcrypt_get_block_size(MCRYPT_RIJNDAEL_128, &amp;#39;cbc&amp;#39;); 7  8   $plainPad = pkcs5_pad($plainText, $blockSize);  //  &amp;lt;---- Padding 9 10   if (mcrypt_generic_init($openMode, $secretKey, $initVector) != -1) 11   {12     $encryptedText = mcrypt_generic($openMode, $plainPad);13     mcrypt_generic_deinit($openMode);      14   } 15   return bin2hex($encryptedText);16 }17 18 // Padding method19 function pkcs5_pad ($plainText, $blockSize)20 {21   // padding logic here22 }And here is the same implemented in Ruby1 def self.encrypt(plain_text, key)2     secret_key     = Digest::MD5.digest(key)3     cipher         = OpenSSL::Cipher::AES.new(128, :CBC)4     cipher.encrypt5     cipher.key     = secret_key6     cipher.iv      = INIT_VECTOR7     encrypted_text = cipher.update(plain_text) + cipher.final8     return (encrypted_text.unpack(&amp;quot;H*&amp;quot;)).first9 endNotice any difference?It turns out that, unlike in Python, PHP and few other languages, Ruby wrapper for OpenSSL automatically takes care of padding (default behaviour). This is clearly mentioned in the documentation. For some reason, techies at our gateway service provider overlooked this and hit a dead-end.By the they, they were gracious enough to acknowledge our contribution in their Ruby Integration Kit (accessible only to their subscribers)But We have open sourced our code here ‘cca_crypto’. We have plans of make this into a complete package - with view generators etc., and publish this as a rubygem. We shall gladly accept any pull request!"
		} ,
	
		{
		  "title"    : "Setting Up Amazon RDS as a Slave to a self-managed MySQL server",
		  "category" : "technology",
		  "url"     : "/technology/setting-up-amazon-rds-as-a-slave-to-a-self-managed-mysql-server",
		  "date"     : "2014-05-21 00:00:00 +0530",
		  "content"	: "Last week, we migrated our MySQL database server, which was running on an EC2 instance, to RDS. We hoped the migration process would be smooth.As always, migrating a large database has its challenges. Business folks expect the minimum possible downtime.The plan was simple.  Launch an RDS instance  Load a full dump into it  Configure it to act as a slave of the self-managed server (current master)  On the D-day, pull the website down and promote the RDS instance to take over as the new masterWe soon discovered that RDS comes with curtailed root permissions. There are several commands that are disallowed. Some of these include “CHANGE MASTER TO….”What do we do now?One option was to carry out the migration in one go, while the website was offline. This meant the downtime would have been several hours, instead of minutes. Obviously, not an acceptable option at all.Some R&amp;amp;D was all it took to discover how to proceed with the original approach.RDS comes with a bunch of stored procedures, which help you configure it as a slave. There is almost a one-to-one mapping of these stored procedures with the commands that are disallowed.MySQL CommandCorrosponding Stored ProcCHANGE MASTER TOmysql.rds_set_external_masterSTART SLAVEmysql.rds_start_replicationSTOP SLAVEmysql.rds_stop_replicationRESET MASTERmysql.rds_reset_external_master So, Using these stored procedures, you can now configure your RDS instance as a slave to your self-managed MySQL serverAfter loading a full dump to RDS, Call the stored procedure mysql.rds_set_external_master like thisCALL mysql.rds_set_external_master (&#39;servername&#39;, port, &#39;user&#39;, &#39;password&#39;, &#39;binlog-file&#39;, binlog-offset, 0);ThenCALL mysql.rds_start_replication;This will make RDS a slave of your self managed mysql server. You can run “SHOW SLAVE STATUS” to see its working.When it is time to promote RDS to master. You call these stored proceduresCALL mysql.rds_stop_replication;CALL mysql.rds_reset_external_master;That’s it. Now point your applications to the RDS instance and take your site live.Note:For your RDS to work as a slave, it needs permissions to connect to port 3306 of your current master. Make sure you open this port for the RDS instance.You can run the following command to find out the ip address of your rds instanceping -c rdsname.cpesx66wwe7y.ap-southeast-1.rds.amazonaws.com"
		} ,
	
		{
		  "title"    : "Beware of creating $HOME/.ssh folder by hand, when SELinux is turned on",
		  "category" : "technology",
		  "url"     : "/technology/beware-of-creating-ssh-folder-by-hand-when-selinux-is-turned-on",
		  "date"     : "2012-07-22 00:00:00 +0530",
		  "content"	: "I was experimenting with chef to manage our Linux boxes. As a standard practice, our application user deployer is homed in /applications/deployer rather than the usual /home/deployer.To enable password less login, I appended my public key to ~/.ssh/authorized_keys  ssh-copy-id -i ~/.ssh/id_rsa deployer@remote.serverThe first time I run this command, I will be prompted for a password to install my key. After this, I can run the below command to login without a password:ssh -i ~/.ssh/id_rsa deployer@remote.serverHowever, that did not work as expected.For some reason, sshd was unable to read the authorized_keys file. I checked all the usual things.. all looked fine. Everything seem to work just fine when SELinux was running in permissive mode on the remote server, but not when it was in enforcing mode.Discovered that if .ssh folder was created by hand (or even the folder containing .ssh folder), we need to do few additional things.Step 1: Open this file /etc/selinux/targeted/contexts/files/file_contexts.homedirs and append the following line to the bottom /applications/deployer/[^/]*/ssh(/.*)?     system_u:object_r:ssh_home_t:s0Note: remember to adjust the path as per your needs.Step 2: run the following commandrestorecon -R -v /applications/deployer/.sshAgain, remember to adjust the path as per your needs.Now you are all set! ssh -i ~/.ssh/id_rsa deployer@remote.servershould log you in without asking for a password!"
		} ,
	
		{
		  "title"    : "Importance of Date field in an email&#39;s Header",
		  "category" : "technology",
		  "url"     : "/technology/importance-of-date-field-in-an-emails-header",
		  "date"     : "2012-04-04 00:00:00 +0530",
		  "content"	: "So far, we paid little attention to email delivery issues. We knew delivering to rediffmail is a pain. So we discouraged our users from using rediffmail. Apart from that we had FCrDNS and SPF configured and working fine. We had also configured DKIM. And then a month ago, we also added DMARC in monitor mode.We were happy! Until…Recently, we started getting loads of phishing emails from what appeared to originate from our own domain name [not our servers].It told us two things.   eLitmus.com was growing in popularity  We cannot ignore email delivery issue any longerWe ran our email through Spam Assassin checks and were surprised to see that we got a score of 6. Anything above 5 is BAD. It’s a straight spam! But we knew we were not spamming. These were transactional emails triggered by our website on certain events, such as New registration, or Forgot Password.It was almost by accident, we noticed that the timezone in the Date header of the email was appearing as +0580. Indian Standard Time (IST) is 5 hours and 30 minutes ahead of UTC. So this value should have been +0530, not +0580. Apparently, that is good enough reason for Spam Assassin to treat our mails as spam.Tracing backwards, we discovered a bug in our application code and fixed it. It was a single line fix.With this change, Spam Assassin was happy to give us a score of zero.That is just one part of one header. There are ten others which have to be configured correctly.Here is an article with good insights in to how gmail calculates sender reputation. Its a little dated, but still relevent. Sender reputation in a large webmail service (PDF)By the way, here is a nice and free JSon API to check your email’s reputation."
		} 
	
]